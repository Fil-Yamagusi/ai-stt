#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-
"""2024-04-30 Fil - Future code Yandex.Practicum
Yandex SpeechKit - Speech Recognition
README.md for more

Fil FC Speech-to-text
@fil_fc_ai_stt_bot
https://t.me/fil_fc_ai_stt_bot
"""
__version__ = '0.1'
__author__ = 'Firip Yamagusi'

from time import time_ns, strftime
from math import ceil

# third-party
import logging
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, Message, File
import soundfile as sf

# custom
# –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
from config import MAIN, TB, YANDEX, LIM
from stt_db import (
    get_db_connection,
    create_db,
    is_limit_user,
    is_limit_stt_blocks,
    create_user,
    add_file2remove,
    insert_stt,
    is_limit,
)

from stt_stt import (
    ask_speech_recognition,
    ask_speech_kit_stt,
)

if MAIN['test_mode']:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.INFO,
    )
else:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%F %T',
        level=logging.INFO,
        filename=MAIN['log_filename'],
        filemode="w",
        encoding='utf-8',
    )

# *******************************************************************
# –ü–û–ù–ï–°–õ–ê–°–¨! –í –ê–ö–ê–ö–£!
logging.warning(f"MAIN: start")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ). –ë–µ–∑ –ë–î –Ω–µ —Å–º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
db_conn = get_db_connection(MAIN['db_filename'])
if db_conn == False:
    logging.error(f"MAIN: DB cannot open connection")
    exit(1)
logging.warning(f"MAIN: DB open connection")

if create_db(db_conn) == False:
    logging.error(f"MAIN DB: cannot create tables")
    db_conn.close()
    exit(2)

bot = TeleBot(TB['TOKEN'])
logging.warning(f"TB: start: {TB['BOT_USERNAME']} | {TB['BOT_NAME']}")

# –ü—É—Å—Ç–æ–µ –º–µ–Ω—é, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
hideKeyboard = ReplyKeyboardRemove()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã. –í —Å–ª–æ–≤–∞—Ä–µ, —á—Ç–æ–±—ã –ª–µ–≥—á–µ —É–ø—Ä–∞–≤–ª—è—Ç—å
T = {}
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ TTS, STT (–≤–¥—Ä—É–≥ –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –ò–ò-—Ä–µ—Å—É—Ä—Å—ã)
# t_stop_test = '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
T['t_stop_test'] = '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'

mu_test_stt = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
mu_test_stt.add(*[T['t_stop_test']])

# –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –º—É—á–∏—Ç—å –ë–î
user_data = {}


def convert_ogg_to_wav(input_file: str, output_file: str) -> tuple:
    """
    –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ STT –Ω—É–∂–µ–Ω WAV
    https://pypi.org/project/soundfile/
    """
    try:
        data, samplerate = sf.read(input_file)
        sf.write(output_file, data, samplerate, format='WAV')
        return True, output_file
    except Exception as e:
        logging.error(f"MAIN: convert_ogg_to_wav error: {e}")
        return False, e


def check_user(message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (PROJECT_USERS)
    """

    user_id = message.from_user.id

    if user_id not in user_data:
        # –í–¥—Ä—É–≥ —É–∂–µ –ø—Ä–µ–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?
        limit_result, user_exists = is_limit_user(db_conn, user_id)
        # –î–∞, –ø—Ä–µ–¥–µ–ª
        if limit_result == True:
            bot.send_message(user_id, '–°—Ç—Ä–∞–Ω–Ω–æ, –ø—Ä–µ–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–µ–ª—å–∑—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.')
            return False
        # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–µ–ª –∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        elif not user_exists:
            create_user(db_conn, user_id)

        user_data[user_id] = {}
        user_data[user_id]['user_id'] = user_id


def voice_obj_to_text(message: Message, voice_obj: File) -> tuple:
    """
    –ù–∞–¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å voice –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤.
    –ë–ª–æ–∫–∏ STT –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ.
    """
    user_id = message.from_user.id

    # –¥–ª—è SpeechRecognition –Ω—É–∂–µ–Ω WAV
    ogg_file_path = voice_obj.file_path
    voice_file = bot.download_file(ogg_file_path)

    with open(ogg_file_path, 'wb') as ogg_file:
        ogg_file.write(voice_file)

    wav_file_path = f"{ogg_file_path[0:-3]}wav"
    wav_res = convert_ogg_to_wav(ogg_file_path, wav_file_path)[0]
    add_file2remove(db_conn, user_data[user_id], ogg_file_path)
    logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {ogg_file_path} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
    add_file2remove(db_conn, user_data[user_id], wav_file_path)
    logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {wav_file_path} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")

    stt_blocks = ceil(message.voice.duration / 15)
    logging.debug(f"MAIN: process_test_stt: {voice_obj.file_path} {stt_blocks}")

    result = {}

    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å SpeechRecognition.Google
    asr_start = time_ns()
    success, res = ask_speech_recognition(wav_file_path)
    logging.info(f"MAIN: ask_speech_recognition {success}, {res}")
    asr_time_ms = (time_ns() - asr_start) // 1000000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    result['SR.Google'] = {'content': res, 'asr_time_ms': asr_time_ms}
    if success:
        insert_stt(db_conn, user_id,
                   wav_file_path, content=res,
                   blocks=stt_blocks, model='SR.Google',
                   asr_time_ms=asr_time_ms)

    # –ü–ª–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å SpeechKit. –ü–µ—Ä–µ–¥ –Ω–∏–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
    limit_result, error_msg = is_limit_stt_blocks(db_conn, user_id, stt_blocks)
    # –£–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω –∏–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω?
    if limit_result:
        logging.warning(f"MAIN: is_limit_stt_blocks {limit_result}, {error_msg}")
        result['Yandex SpeechKit'] = {'content': error_msg, 'asr_time_ms': 0}
        return True, result

    asr_start = time_ns()
    success, res = ask_speech_kit_stt(voice_file)
    logging.info(f"MAIN: ask_speech_kit_stt {success}, {res}")
    # success, res = True, "SpeechKit –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª, –∏–¥—ë—Ç —Ç–µ—Å—Ç –º–æ–¥—É–ª—è SR"
    asr_time_ms = (time_ns() - asr_start) // 1000000

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    result['Yandex SpeechKit'] = {'content': res, 'asr_time_ms': asr_time_ms}
    if not success:
        stt_blocks = 0
    insert_stt(db_conn, user_id,
               ogg_file_path, content=res,
               blocks=stt_blocks, model='SpeechKit',
               asr_time_ms=asr_time_ms)

    return True, result


@bot.message_handler(commands=['start'])
def handle_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—á–∞–ª–∞
    """
    user_id = message.from_user.id
    check_user(message)

    # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(
        user_id,
        '‚úåüèª <b>–ü—Ä–∏–≤–µ—Ç!</b>\n'
        '–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º Speech-to-text: <b>/stt</b>\n\n'
        '–ö—Å—Ç–∞—Ç–∏,\n'
        '/stat - –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n'
        '/debug - –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['stt'])
def handle_stt(message: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    user_id = message.from_user.id
    check_user(message)

    bot.send_message(
        user_id,
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Speech-to-text</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 5-15 —Å–µ–∫, –ø–æ–ª—É—á–∏ –≤ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç.\n"
        f"(–∏–ª–∏ –Ω–∞–∂–º–∏ <i>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</i>)\n\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ –±–ª–æ–∫–∏ (1 –±–ª–æ–∫ = 15 —Å–µ–∫): /stat ",
        parse_mode='HTML',
        reply_markup=mu_test_stt)
    bot.register_next_step_handler(message, process_stt)


def process_stt(message: Message):
    """
    –ø–æ –¢–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ, –∞ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç.
    """
    user_id = message.from_user.id
    check_user(message)

    if message.text == T['t_stop_test']:
        bot.send_message(
            user_id,
            f"–û–∫, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Speech-to-text.\n"
            f"–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ: /start",
            reply_markup=hideKeyboard)
        return

    if not message.voice:
        bot.send_message(
            user_id,
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /stt",
            reply_markup=hideKeyboard)
        return

    if message.voice.duration > 30:
        bot.send_message(
            user_id,
            f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /stt",
            reply_markup=hideKeyboard)
        return

    bot.send_message(
        user_id,
        f"–ü–µ—Ä–µ–¥–∞—é –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
        f"–±–ª–æ–∫–æ–≤: <b>{ceil(message.voice.duration / 15)}</b>\n"
        f"–¥–ª–∏–Ω–∞: <b>{message.voice.duration} —Å–µ–∫</b>\n",
        parse_mode='HTML',
        reply_markup=hideKeyboard)

    # –î–ª—è SpeechKit –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—É–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    bot.send_chat_action(user_id, 'typing')
    voice_obj = bot.get_file(message.voice.file_id)
    success, res = voice_obj_to_text(message, voice_obj)

    if success:
        result_msg = ""
        for r in res.keys():
            result_msg += (
                f"–ú–æ–¥—É–ª—å <b>{r}</b> –∑–∞ {res[r]['asr_time_ms']} –º—Å:\n"
                f"<i>{res[r]['content']}</i>\n\n")
    else:
        result_msg = f"<b>–û—à–∏–±–∫–∞!</b>\n\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å\n\n"

    bot.send_message(
        user_id,
        f"{result_msg}–ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /stat",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


def append_stat(stat: list, param_name: str, user: dict) -> list:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤ /stat
    –§—É–Ω–∫—Ü–∏—è –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –≤ –Ω—ë–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ç—Ä–∏. –ù—É —à—Ç–æ—à...
    """
    r1, r2 = is_limit(db_conn, param_name=param_name, user=user)

    stat.append(f"{LIM[param_name]['descr']}:")
    stat.append(f"<b>{int(100 * r2 / LIM[param_name]['value'])}</b>% "
                f"({r2} / {LIM[param_name]['value']})")

    return stat


@bot.message_handler(commands=['stat'])
def handle_stat(message: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ò–ò-—Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    –§—É–Ω–∫—Ü–∏—è –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –≤ –Ω—ë–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ç—Ä–∏. –ù—É —à—Ç–æ—à...
    """
    user_id = message.from_user.id
    check_user(message)

    p_stat = []
    p_stat = append_stat(p_stat, 'PROJECT_USERS', user_data[user_id])
    p_stat = append_stat(p_stat, 'PROJECT_STT_BLOCKS', user_data[user_id])

    u_stat = []
    u_stat = append_stat(u_stat, 'USER_STT_BLOCKS', user_data[user_id])

    bot.send_message(
        user_id,
        f"<b>–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –†–ê–°–•–û–î –ò–ò-–†–ï–°–£–†–°–û–í</b>\n(—Ç–æ–ª—å–∫–æ –¥–ª—è Yandex SpeechKit)\n\n"
        f"<b>–í–µ—Å—å –ø—Ä–æ–µ–∫—Ç:</b>\n\n"
        f"{'\n'.join(p_stat)}\n\n"
        f"<b>–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥:</b>\n\n"
        f"{'\n'.join(u_stat)}",
        parse_mode='HTML',
        reply_markup=hideKeyboard)


@bot.message_handler(commands=['debug'])
def handle_debug(message: Message):
    """
    –ß–∞—Å—Ç—å –¢–ó - –°–ò–ö–†–ï–¢–ù–´–ô –≤—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    user_id = message.from_user.id
    check_user(message)
    logging.info(f"MAIN: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥-—Ñ–∞–π–ª")

    try:
        with open(MAIN['log_filename'], "rb") as f:
            bot.send_document(user_id, f)
    except Exception:
        logging.error(f"MAIN: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        bot.send_message(
            user_id,
            f"–ê–∞–∞–∞! –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª {MAIN['log_filename']}",
            reply_markup=hideKeyboard)


# *********************************************************************
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    bot.infinity_polling()
except urllib3.exceptions.ReadTimeoutError as e:
    logging.info(f"TB: Read timed out. (read timeout=25)")

logging.warning(f"TB: finish")

db_conn.close()
logging.warning(f"MAIN: DB close connection")

logging.warning(f"MAIN: finish")
